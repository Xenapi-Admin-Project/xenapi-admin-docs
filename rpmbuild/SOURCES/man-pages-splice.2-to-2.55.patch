--- man-pages-2.39/man2/splice.2	2007-06-18 17:16:18.789039000 +0200
+++ man-pages-2.55/man2/splice.2	2007-06-20 17:44:49.580988000 +0200
@@ -11,7 +11,7 @@
 .\" manual under the conditions for verbatim copying, provided that the
 .\" entire resulting derived work is distributed under the terms of a
 .\" permission notice identical to this one.
-.\" 
+.\"
 .\" Since the Linux kernel and libraries are constantly changing, this
 .\" manual page may be incorrect or out-of-date.  The author(s) assume no
 .\" responsibility for errors or omissions, or for damages resulting from
@@ -19,11 +19,11 @@
 .\" have taken the same level of care in the production of this manual,
 .\" which is licensed free of charge, as they might when working
 .\" professionally.
-.\" 
+.\"
 .\" Formatted or processed versions of this manual, if unaccompanied by
 .\" the source, must acknowledge the copyright and authors of this work.
 .\"
-.TH splice 2 2006-04-28 "Linux 2.6.17" "Linux Programmer's Manual"
+.TH SPLICE 2 2006-04-28 "Linux 2.6.17" "Linux Programmer's Manual"
 .SH NAME
 splice \- splice data to/from a pipe
 .SH SYNOPSIS
@@ -31,13 +31,13 @@
 .B #define _GNU_SOURCE
 .B #include <fcntl.h>
 
-.BI "long splice(int " fd_in ", off_t *" off_in ", int " fd_out , 
+.BI "long splice(int " fd_in ", off_t *" off_in ", int " fd_out ,
 .BI "            off_t *" off_out ", size_t " len \
 ", unsigned int " flags );
 .fi
 .SH DESCRIPTION
 .BR splice ()
-moves data between two file descriptors 
+moves data between two file descriptors
 without copying between kernel address space and user address space.
 It transfers up to
 .I len
@@ -45,37 +45,37 @@
 .I fd_in
 to the file descriptor
 .IR fd_out ,
-where one of the descriptors must refer to a pipe. 
+where one of the descriptors must refer to a pipe.
 
 If
-.I in_fd
+.I fd_in
 refers to a pipe, then
-.I in_off 
+.I off_in
 must be NULL.
 If
-.I in_fd 
+.I fd_in
 does not refer to a pipe and
-.I in_off
-is NULL, then bytes are read from 
-.I in_fd
+.I off_in
+is NULL, then bytes are read from
+.I fd_in
 starting from the current file offset,
 and the current file offset is adjusted appropriately.
 If
-.I in_fd 
+.I fd_in
 does not refer to a pipe and
-.I in_off
-is not NULL, then 
-.I in_off
+.I off_in
+is not NULL, then
+.I off_in
 must point to a buffer which specifies the starting
 offset from which bytes will be read from
-.IR in_fd ;
+.IR fd_in ;
 in this case, the current file offset of
-.IR in_fd 
+.IR fd_in
 is not changed.
 Analogous statements apply for
 .I out_fd
 and
-.IR out_off .
+.IR off_out .
 
 The
 .I flags
@@ -83,15 +83,15 @@
 zero or more of the following values:
 .TP 1.9i
 .B SPLICE_F_MOVE
-Attempt to move pages instead of copying. 
+Attempt to move pages instead of copying.
 This is only a hint to the kernel:
-pages may still be copied if the kernel cannot move the 
+pages may still be copied if the kernel cannot move the
 pages from the pipe, or if
 the pipe buffers don't refer to full pages.
 .TP
 .B SPLICE_F_NONBLOCK
 Do not block on I/O.
-This makes the splice pipe operations non-blocking, but 
+This makes the splice pipe operations non-blocking, but
 .BR splice ()
 may nevertheless block because the file descriptors that
 are spliced to/from may block (unless they have the
@@ -101,7 +101,7 @@
 .B SPLICE_F_MORE
 More data will be coming in a subsequent splice.
 This is a helpful hint when
-the 
+the
 .I fd_out
 refers to a socket (see also the description of
 .B MSG_MORE
@@ -121,13 +121,13 @@
 Upon successful completion,
 .BR splice ()
 returns the number of bytes
-spliced to or from the pipe. 
-A return value of 0 means that there was no data to transfer, 
-and it would not make sense to block, because there are no 
-writers connected to the write end of the pipe referred to by 
+spliced to or from the pipe.
+A return value of 0 means that there was no data to transfer,
+and it would not make sense to block, because there are no
+writers connected to the write end of the pipe referred to by
 .IR fd_in .
 
-On error, 
+On error,
 .BR splice ()
 returns \-1 and
 .I errno
@@ -135,84 +135,85 @@
 .SH ERRORS
 .TP
 .B EBADF
-One or both file descriptors are not valid, 
+One or both file descriptors are not valid,
 or do not have proper read-write mode.
 .TP
 .B EINVAL
 Target file system doesn't support splicing;
-neither of the descriptors refers to a pipe; or 
+neither of the descriptors refers to a pipe; or
 offset given for non-seekable device.
 .TP
 .B ENOMEM
 Out of memory.
 .TP
 .B ESPIPE
-Either 
+Either
 .I off_in
-or 
+or
 .I off_out
 was not NULL, but the corresponding file descriptor refers to a pipe.
-.SH HISTORY
+.SH VERSIONS
 The
 .BR splice (2)
-system call first appeared in Linux-2.6.17.
+system call first appeared in Linux 2.6.17.
+.SH "CONFORMING TO"
+This system call is Linux specific.
 .SH NOTES
 The three system calls
 .BR splice (2),
 .BR vmsplice (2),
 and
 .BR tee (2)),
-provide userspace programs with full control over an arbitrary 
+provide userspace programs with full control over an arbitrary
 kernel buffer, implemented within the kernel using the same type
-of buffer that is used for a pipe.  
+of buffer that is used for a pipe.
 In overview, these system calls perform the following tasks:
 .TP 1.2i
 .BR splice ()
 moves data from the buffer to an arbitrary file descriptor, or vice versa,
 or from one buffer to another.
 .TP
-.BR tee ()
+.BR tee (2)
 "copies" the data from one buffer to another.
 .TP
-.BR vmsplice () 
+.BR vmsplice (2)
 "copies" data from user space into the buffer.
 .PP
 Though we talk of copying, actual copies are generally avoided.
-The kernel does this by implementing a pipe buffer as a set 
+The kernel does this by implementing a pipe buffer as a set
 of reference-counted pointers to pages of kernel memory.
-The kernel creates "copies" of pages in a buffer by creating new 
-pointers (for the output buffer) referring to the pages, 
-and increasing the reference counts for the pages: 
+The kernel creates "copies" of pages in a buffer by creating new
+pointers (for the output buffer) referring to the pages,
+and increasing the reference counts for the pages:
 only pointers are copied, not the pages of the buffer.
 .\"
-.\" Linus: Now, imagine using the above in a media server, for example. 
-.\" Let's say that a year or two has passed, so that the video drivers 
-.\" have been updated to be able to do the splice thing, and what can 
+.\" Linus: Now, imagine using the above in a media server, for example.
+.\" Let's say that a year or two has passed, so that the video drivers
+.\" have been updated to be able to do the splice thing, and what can
 .\" you do? You can:
-.\" 
+.\"
 .\" - splice from the (mpeg or whatever - let's just assume that the video
 .\"   input is either digital or does the encoding on its own - like they
 .\"   pretty much all do) video input into a pipe (remember: no copies - the
-.\"   video input will just DMA directly into memory, and splice will just 
+.\"   video input will just DMA directly into memory, and splice will just
 .\"   set up the pages in the pipe buffer)
 .\" - tee that pipe to split it up
 .\" - splice one end to a file (ie "save the compressed stream to disk")
-.\" - splice the other end to a real-time video decoder window for your 
+.\" - splice the other end to a real-time video decoder window for your
 .\"   real-time viewing pleasure.
 .\"
-.\" Linus: Now, the advantage of splice()/tee() is that you can 
-.\" do zero-copy movement of data, and unlike sendfile() you can 
-.\" do it on _arbitrary_ data (and, as shown by "tee()", it's more 
-.\" than just sending the data to somebody else: you can duplicate 
-.\" the data and choose to forward it to two or more different 
+.\" Linus: Now, the advantage of splice()/tee() is that you can
+.\" do zero-copy movement of data, and unlike sendfile() you can
+.\" do it on _arbitrary_ data (and, as shown by "tee()", it's more
+.\" than just sending the data to somebody else: you can duplicate
+.\" the data and choose to forward it to two or more different
 .\" users - for things like logging etc).
 .\"
 .SH EXAMPLE
 See
 .BR tee (2).
-.SH "CONFORMING TO"
-This system call is Linux specific.
 .SH SEE ALSO
 .BR sendfile (2),
 .BR splice (2),
-.BR tee (2)
+.BR tee (2),
+.BR feature_test_macros (7)
